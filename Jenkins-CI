#!groovy
/**
IBM KAPAMILYA
GROUP 3
*/

pipeline{
    agent {
        label 'slave01'
    }

    options {
        timestamps()
    }

    parameters {
        string(defaultValue: "develop", description: 'Branch Specifier', name: 'GIT_SPECIFIER')
        string(defaultValue: "https://github.com/detorresrc/devops-angular7", description: 'GIT URL', name: 'GIT_URL')
        string(name: 'BUILD_APPROVER_EMAIL', defaultValue: 'detorresrc@gmail.com', description: 'Build Approver Email')
        string(name: 'BUILD_APPROVER_NAME', defaultValue: 'Rommel de Torres', description: 'Build Approver Name')
    }

    stages {
        stage('Source') {
            steps {
                notifyBuild('STARTED')
                git branch: "${params.GIT_SPECIFIER}", url: "${params.GIT_URL}"

                sh '''
                rm -Rf dist/
                npm install
                '''
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                script {
                    scannerHome = tool 'SONARQUBE_SCANNER'
                }
                withCredentials([string(credentialsId: 'SONARQUBE_APIKEY', variable: 'SONARQUBE_APIKEY')]) {
                    withSonarQubeEnv('SONARQUBE_SERVER') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.login=$SONARQUBE_APIKEY -Dsonar.projectVersion=$BUILD_NUMBER"
                    }
                }
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true, credentialsId: 'SONARQUBE_APIKEY'
                }
            }
        }
        stage('Build') {
            steps {
                sh 'npm run build:prod:en'
            }
        }
        stage('Upload Artifact') {
            steps {
                withCredentials([string(credentialsId: 'ARTIFACTORY_USERNAME', variable: 'ARTIFACTORY_USERNAME'), string(credentialsId: 'ARTIFACTORY_PASSWORD', variable: 'ARTIFACTORY_PASSWORD')]) {
                    sh '''
                        ARTIFACT_NAME=artifact.group3.$BUILD_NUMBER.tar.bz2
                        cp -fr Dockerfile config dist/
                        tar -cj dist/* > $ARTIFACT_NAME
                        curl -u$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD -T $ARTIFACT_NAME "https://jfrog-v2.ibm-kapamilya-devops.com/artifactory/group3/$ARTIFACT_NAME"
                    '''
                }
            }
        }
        stage('Create Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'DOCKER_USER', variable: 'DOCKER_USER'), string(credentialsId: 'DOCKER_PASS', variable: 'DOCKER_PASS')]) {
                    sh '''
                    cd dist
                    docker login docker.io -u="${DOCKER_USER}" -p="${DOCKER_PASS}"
                    docker build -t="devopsgroup3/angular7" .

                    docker tag devopsgroup3/angular7 devopsgroup3/angular7:staging-$BUILD_NUMBER
                    docker push devopsgroup3/angular7:staging-$BUILD_NUMBER

                    docker tag devopsgroup3/angular7 devopsgroup3/angular7:production-$BUILD_NUMBER
                    docker push devopsgroup3/angular7:production-$BUILD_NUMBER
                    '''
                }
            }
        }
        stage('Kubernetes Deployment - Staging') {
            steps {
                sh '''
                aws eks --region ap-southeast-1 update-kubeconfig --name group3
                cd ${WORKSPACE}
                cp dist/config/angular7-staging-deployment-service.yaml /tmp/deployment.yaml
                sed -i "s/__VERSION__/staging-${BUILD_NUMBER}/" /tmp/deployment.yaml

                kubectl apply -f /tmp/deployment.yaml

                /usr/bin/aws cloudfront create-invalidation --distribution-id EI8EIEVCGFI7B --paths '/*'
                '''
            }
        }
    }

    post {
        always {
            notifyBuild("${currentBuild.currentResult}")
        }
        aborted {
            echo "BUILD ABORTED"
        }
        success {
            echo "BUILD SUCCESS"
            sendProdApproval()
        }
        unstable {
            echo "BUILD UNSTABLE"
        }
        failure {
            echo "BUILD FAILURE"
        }
    }
}

def getCurrentBranch () {
    return sh (
            script: 'git rev-parse --abbrev-ref HEAD',
            returnStdout: true
    ).trim()
}

def getShortCommitHash() {
    return sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
}

def getChangeAuthorName() {
    return sh(returnStdout: true, script: "git show -s --pretty=%an").trim()
}

def getChangeAuthorEmail() {
    return sh(returnStdout: true, script: "git show -s --pretty=%ae").trim()
}

def getChangeSet() {
    return sh(returnStdout: true, script: 'git diff-tree --no-commit-id --name-status -r HEAD').trim()
}

def getChangeLog() {
    return sh(returnStdout: true, script: "git log --date=short --pretty=format:'%ad %aN <%ae> %n%n%x09* %s%d%n%b'").trim()
}

def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus = buildStatus ?: 'SUCCESS'

    def branchName = getCurrentBranch()
    def shortCommitHash = getShortCommitHash()
    def changeAuthorName = getChangeAuthorName()
    def changeAuthorEmail = getChangeAuthorEmail()
    def changeSet = getChangeSet()
    def changeLog = getChangeLog()

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: '${env.JOB_NAME} [${env.BUILD_NUMBER}]'" + branchName + ", " + shortCommitHash
    def summary = "Status: ${buildStatus} \n " +
            "Started: Name:: ${env.JOB_NAME} \n " +
            "Build Number: ${env.BUILD_NUMBER} \n " +
            "Build URL: ${env.BUILD_URL} \n " +
            "Short Commit Hash: " + shortCommitHash + " \n " +
            "Branch Name: " + branchName + " \n " +
            "Change Author: " + changeAuthorName + " \n " +
            "Change Author Email: " + changeAuthorEmail + " \n " +
            "Change Set: " + changeSet

    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    slackSend channel: 'jenkins', color: "${colorCode}", failOnError: true, message: "${summary}", teamDomain: 'ibmkapamilyad-tfj8971', tokenCredentialId: 'GROUP3_SLACK_APIKEY'
}

def sendProdApproval() {
    def redirectTo = "https://jenkins-v2.ibm-kapamilya-devops.com/job/GROUP3/job/Angular7-CD/${env.BUILD_NUMBER}"
    def build_url = "https://jenkins-v2.ibm-kapamilya-devops.com/job/GROUP3/job/Angular7-CD/buildWithParameters"
    def build_token = "111cfe3797ebf5ca7c12d7f6ba04258408"

    def form = "Hi ${BUILD_APPROVER_NAME}, <p>Job <strong>${env.JOB_NAME} | ${env.BUILD_NUMBER}</strong> is ready for deployment.</p>Awaiting for your approval, kindly click the button below to proceed and disregard this email if not so.<p></p><form method='post' action='${build_url}?token=${build_token}&PARENT_BUILD_NUMBER=${env.BUILD_NUMBER}'><input name='crumb' type='hidden' value='68f6099a9b8b4ac0194d03ac6cfae817'><input name='json' type='hidden' value=\"{'parameter': {'name': 'TRIGGERED_FROM_BUILD', 'runId': '${JOB_NAME}#${BUILD_NUMBER}'}, 'statusCode': '303', 'redirectTo': '${redirectTo}'}\" /><input name='Submit' type='submit' value='Deploy' class='submit-button primary' /></form>"
    def this_subject = "[GROUP3 ANGULAR7] Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' - BUILD "
    def this_body = form
    
    emailext mimeType: 'text/html', body: this_body, subject: this_subject, to: '${BUILD_APPROVER_EMAIL}'
}